function [gauss_selected,B_selected,repeated_values] = selected_points(ng,npg,ntens,combinations,CLASS_INTEGER)
% Rows included in the gappy PHI matrix are, not only those
% generated by randomly-based algorithm, but also the accompanying stress
% components; i.e., if the row 1 is selected (1st gauss point, 1st
% component),
% then, automatically, rows 2,3,4 are appended.


% Which points ?
if nargin == 0
    ng = 4 ;
    load('prueba.mat');
    combinations = combinations_old; %(:,1:7) ;
    combinations = [4 3 3 1 ; 8 5 7 7; 9 2 3 4]';
    CLASS_INTEGER = 'uint16';
end
%dbstop('19')

repeated_values = 0;

igauss =  mod(combinations,ng) ;
[ind1] = find(igauss==0)  ;
if ~isempty(ind1)
    igauss(ind1) = ng ;
end
disp('... calculating points ...')
points = (combinations-igauss)/ng+1;
clear igauss

a = [points combinations];
% [X,I] = sort(a(:,1));
% b = [X,a(I,2)];
% gauss_selected = [X ceil((b(:,2)-ng*(b(:,1)-1))/ntens)];

b=sortrows(a,1);
gauss_selected = [b(:,1) ceil((b(:,2)-ng*(b(:,1)-1))/ntens)];
% num_value = length(unique(sum(gauss_selected,2)));

repeat_ID=ones(length(combinations),1);

for i = 1:length(combinations)-1
    if (gauss_selected(i+1,1)==gauss_selected(i,1)) && (gauss_selected(i+1,2)==gauss_selected(i,2)) 
        repeat_ID(i+1)=0;
    end    
end

B_selected = (gauss_selected((repeat_ID==1),1)-1)*npg + gauss_selected((repeat_ID==1),2);
[B_selected isort_B] = sort(B_selected);
gauss_selected = gauss_selected((repeat_ID==1),:);
gauss_selected = gauss_selected(isort_B,:);
repeated_values = length(combinations) - sum(repeat_ID);

% 
% if num_value < length(combinations)
%    repeated_values = length(combinations) - num_value;
% 
%    test = sum(gauss_selected,2);
%    repeat_ID=ones(length(combinations),1);
%    
% for i = 1:length(combinations)-1
%     if test(i+1)==test(i)
%         repeat_ID(i+1)=0;
%     end    
% end
% 
% B_selected = (gauss_selected((repeat_ID==1),1)-1)*npg + gauss_selected((repeat_ID==1),2);
% gauss_selected = gauss_selected((repeat_ID==1),:);
% 
% else
%     
% B_selected = (gauss_selected(:,1)-1)*npg + gauss_selected(:,2);
% 
% end