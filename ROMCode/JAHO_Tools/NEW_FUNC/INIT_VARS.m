

% HF MODEL
% -----------
% ATRIBUTOS_PARA_ENTRENAMIENTO - DEFAULT INPUTS
SEL_SNPSH_DISP = ''; % Selection of snapshot displacements
% OPTIONS
% 1) SEL_SNPSH_DISP = ''; Ignores this variables (selection follows .mfl file indications)
% 2) SEL_SNPSH_DISP = 'ALL', the entire set of realizations of the displacement vector is stored in memory.
INDEX_INV_VAR_PLOT = [] ;
% If INDEX_INV_VAR_PLOT = i, then the i-th component of internal variable
% hvar_new will be stored in the matrix INT_VAR_PLOT
INPUT_TRAJ = [] ;
% If INPUT_TRAJ isempty, then strain trajectories are read from input data file ().,mfl
% Otherwise, INPUT_TRAJ is a structured array containing such trajectories. Fields:
%INPUT_TRAJ.funbc
%INPUT_TRAJ.np
%INPUT_TRAJ.DEF_MACRO
%INPUT_TRAJ.DEF_MACRO
INDEX_VAR_STATE_STEP = 1; % internal variable choosen for verifing the state of step (ELASTIC or INELASTIC)
postpro_impre_step = [] ;  % Frequency with which gid's results are printed.If empty, postpro_impre_step
% is read from the default .mfl data file.

% ROM-I MODEL
% -----------
% DEFAULT INPUTS
SEL_SNPSH_STRESS = ''; % SElection of snapshot displacements
% OPTIONS
% 1) SEL_SNPSH_DISP = []; Ignores this variables (selection follows .mfl file indications)
% 2) SEL_SNPSH_DISP = 'ALL', the entire set of realizations of the
% displacement vector is stored in memory.
tol_disp=1.e-4;   
% Tolerance used for discriminating which singular values are retained
% if S(i) < S(1)*tol_disp, then the i-th singular value
% is ignored in the construction of the reduced order
% basis. Its role is irrelevant if ~isempty(nmodesU)
nModesEPS_bar = [] ;    % If ~isempty(nmodesU), the number of displacement modes is set to nmodesU;
nModesEPS_bar2 = [] ;   % If ~isempty(nmodesU), the number of displacement modes is set to nmodesU;
%nModesEPS_bar3 = [] ;   % If ~isempty(nmodesU), the number of displacement modes is set to nmodesU;
% otherwise, it is calculated according to the criterion
% described above (see tol_disp)
PLOT_EIGSPEC = 0 ; % For plotting the eigenspectrum of USNAP'*USNAP
ROMI_STUDY_CASES = 0 ;  % If STUDY_CASES == 1, then ROM-I analysis is carried out for the strain history defined in
% HF_CASES; otherwise, ROM-I analysis is accomplished for the macro-strain
% history used for obtaining the displacement snapshots
BASIS_DATA = [];
% If isemtpy(BASIS_DATA), then the bases to be used in the reduction process are calculated from the
% snapshots generated by launching this script with option "RUN_HF". Otherwise
% BASIS_DATA should contain a string with the complete filename of the workspace in which the
% required data is stored.


% HROM MODEL
% ----------
% DEFAULT INPUTS
NBASIS_ENER_PREV_REG = [] ;    % Number of dominant modes (computed from the SVD of X_{sigma})
NBASIS_ENER_PREV_DIS = [] ;    % Number of dominant modes (computed from the SVD of X_{sigma})

% OBSERVATION:
%  NBASIS_STRESS = NBASIS_STRESS_PREV +  NBASIS_DISPLACEM
%;    % Number of dominant modes (computed
%from the SVD of X_{sigma})
BASIS_EXPANSION = 'DIRECT_U' ;% = DIRECT --> PHI = [PHI_STRESS U_B ]   DEFAULT
% Option 'DIRECT_B' is implemented, but it gives no
% results ...
GREEDY_ALGOR = 'NORMIDENT_JAHO_COM';
LOAD_RESULT_GREEDY = 0 ; % Load previously computed set of indices
NAME_LOAD_GREEDY = 'DATA_JAHO/greedy_NORMIDENT.mat';
NAME_SAVE_GREEDY = 'DATA_JAHO/greedy_NORMIDENT.mat';
APPROXIMATION_ERROR_ANALYSIS = 'NO';
COMPARE_WITH_SNAPSHOTS = 'NO';
TYPE_NORM = 'NORM2';
factor_adimNORM  = {1,[]} ; % Mpa
STRESS_LABELS = {'\sigma_{x}','\sigma_{y}','\sigma_{z}','\tau_{xy}'};
WHERE_WEIGHTS = 'WinB' ; %%% WinB: Weighting factors are included in  B-matrix (default)
%%% WinS: Weighting factors are included
%%% in  SNAPSHOTS  ---> This option gives non-sensical results
load_SVD_U = 1 ; %%%% == 1,the SVD of the displacement snapshot matrix is skipped
% U, S, V are retrieved from .mat file "SVD_U_ws"
SVD_U_ws = ['DATA_JAHO/','SVD_U_',file(1:end-4),'.mat'];
load_SVD_STRESS = 0 ; %%%% == 1,the SVD of the stress snapshot matrix is skipped
% U, S, V are retrieved from .mat file "SVD_STRESS_ws"
SVD_STRESS_ws = ['DATA_JAHO/','SVD_STRESS_',file(1:end-4),'.mat'];
load_SVD_B = 0 ; %%%% == 1,the SVD of the B matrix is skipped
% U, S, V are retrieved from .mat file "SVD_STRESS_ws"
SVD_B_ws = ['DATA_JAHO/','SVD_B_',file(1:end-4),'.mat'];
NGAUSS_GAPPY_loc = [] ;
SNAPSHOTS_ORIGIN = 'ROMI' ; %HF: Stress snapshots are obtained from the HF model
% ROMI: Stress snapshots are obtained from ROM-I model
%%% WinS: Weighting factors are included
%%% in  SNAPSHOTS
% INDIRECT --> PHI = PHI_STRESS +
% eta*RAND_VECT*U_B
 %%% BASIS_DATA = [] ;
% If isemtpy(BASIS_DATA), then the bases to be used in the reduction process are calculated from the
% snapshots generated by launching this script with option "RUN_HF". Otherwise
% BASIS_DATA should contain a string with the
% complete filename of the workspace in which the
% required data is stored.
% DEFAULT INPUTS
 %%% INDEX_INV_VAR_PLOT = [] ; % If INDEX_INV_VAR_PLOT = i, then the i-th component of internal variable
% hvar_new will be stored in the matrix INT_VAR_PLOT
NAME_TEST_TRAJECT_LOC = [] ; % Name used for identifying the associated HF workspace (that must
% have been generated with a script jaho_runGEN* (in this case jaho_runGEN_VM_per))
NAME_WE_TRAJE = [] ;  % This variable provides the entire path to the .mat file containing the data corresponding
% to NAME_TEST_TRAJECT_LOC
ALTERNATE_BASIS_STRESS_B = 0 ;

% Aditional gauss points, if we want to impose ad-hoc gauss points
SET_GPS = {[],[]} ;

% JAHO,9-May-2012
%The basis matrix PHI is formed, on the one hand,  by the  basis vectors
%emanating from % the spectral analysis of the snapshot stress matrix, and on the other hand, by the basis vectors
% obtained  from the SVD of the B-strain matrix.
% Bear in mind that the points selected by greedy algorithms depends upon the order in which the
% basis vectors appear in the   basis matrix ---they are   hierarchical methods.

% The natural option is to group these vectors by simply putting together
% both matrices:
% --> PHI =[U(:,1:imod_stress)   U_B ];
% However, this strategy conflicts with the requirement of "consistenchy"
% that one would expect from a model reduction methods (the more bases one use, the better is the approximation), simply because the
% points/indices associated to the basis matrix placed in the second
% position is likely to change as the level(s) of truncation increases.
% To avoid this, use option ALTERNATE_BASIS_STRESS_B=1. By enabling this
% option, vector bases of both type appears intercalated in the basis
% matrix.
CHATUR_NONREPEATED =0 ;   % New strategy, JAHO-10-may-2012
% It intends to avoid the nuisance of, later on, having to
% add new gauss points (for "refilling" the spots left by the
% repeated ones)
INDICES_GIVEN_LOC = [] ;
% for option GREEDY_ALGOR_GLO_CHOICE = 'HIERARCHICAL_cycle';---->
PARAMETER_GREEDY.LTRAIL = 1 ;   % Trailing basis vectors considered for computing the objective function
PARAMETER_GREEDY.NCOMB = 1 ;    % Number of combinations to be tested (neighbors in the topology defined by the
% objective function)
PLOT_SMALL_EIG_VALUE = 0 ; %  % IF ==1, the eigenvalues of the stiffness matrix (jacobian) is calculated at each
% step and then plotted the evolution of the    eigenvalue with the
% smallest real part.    IF == 2,instead, the program monitors the smallest
% singular value.
%  IF == 3, the evolution of the condition number of KT is monitored.
%
PRINT_GIDRESULTS_HROM = 0 ; % Print GID's post-process results when PRINT_GIDRESULTS_HROM == 1
ECONOMIC_STORAGE = 1. ;%  If this option is enabled, only  â€œhomogenizedâ€? stress are stored (and, in addition, the
% reconstruction operator is no longer stored in memory)
STUDY_L2_ERROR = 0 ;  % 0 == "homogenized stress"  are calculated and stored (default),
%   == 1 L2 norm of the stress field
% == 2, Euclidean norm of the stress field
% Only useful when ECONOMIC_STORAGE = 1.
LEVEL_TRUN_INTERN = [] ; % Level of truncation for the reconstruction of internal bases.
DATA_VARPLOT = [] ;  % this variable is intimately connected with the postprocessing of
% internal variables  (see a typical input data, such as DATA_LOC/T_int.m)
PARTIAL_RECONSTR = 0 ;  % If PARTIAL_RECONSTR == 1, only the first NS gauss points are employed in the reconstruction
% of the stress field
% DEFAULT VALUE --> PARTIAL_RECONSTR = 0;
% Only valid for GREEDY_ALGOR_GLO_CHOICE =
% 'HIERARCHICAL_cycle'
 %%% postpro_impre_step = [] ;  % Frequency with which gid's results are printed.If empty, postpro_impre_step
 % is read from the default .mfl data file. 
RELOAD_BMATRIX = 1 ; % Variable added 9-Aug-2012. It purports to avoid
                     % repeating the operation of constructing the "B-matrices".

%EXTRACTING INPUTS
switch MOD_TYPE
    case 0   % HF CASE - TRAINING
        FdnamesInputs = {'SEL_SNPSH_DISP','INDEX_INV_VAR_PLOT','INDEX_VAR_STATE_STEP','INPUT_TRAJ','postpro_impre_step'};
    case 0.5 % HF CASE
        FdnamesInputs = {'INDEX_INV_VAR_PLOT','SEL_SNPSH_DISP','SEL_SNPSH_STRESS'};        
    case 1   % ROMI CASE
        %FdnamesInputs = {'SEL_SNPSH_STRESS','tol_disp','nModesEPS_bar','nModesEPS_bar2','PLOT_EIGSPEC','ROMI_STUDY_CASES','BASIS_DATA'};
        FdnamesInputs = {'nModesEPS_bar','nModesEPS_bar2','BASIS_DATA'};
    case 2   % HROM CASE
        FdnamesInputs = {'NBASIS_ENER_PREV_REG','NBASIS_ENER_PREV_DIS','nModesEPS_bar','nModesEPS_bar2','BASIS_EXPANSION','GREEDY_ALGOR','LOAD_RESULT_GREEDY','SET_GPS',...
            'NAME_LOAD_GREEDY','NAME_SAVE_GREEDY','APPROXIMATION_ERROR_ANALYSIS','COMPARE_WITH_SNAPSHOTS','TYPE_NORM','STRESS_LABELS','factor_adimNORM',...
            'WHERE_WEIGHTS','load_SVD_U','SVD_U_ws','load_SVD_STRESS','SVD_STRESS_ws','load_SVD_B','SVD_B_ws','NGAUSS_GAPPY_loc',...
            'SNAPSHOTS_ORIGIN','BASIS_DATA','INDEX_INV_VAR_PLOT','NAME_TEST_TRAJECT_LOC','NAME_WE_TRAJE','ALTERNATE_BASIS_STRESS_B',...
            'CHATUR_NONREPEATED','INDICES_GIVEN_LOC','PARAMETER_GREEDY','PLOT_SMALL_EIG_VALUE','PRINT_GIDRESULTS_HROM','ECONOMIC_STORAGE',...
            'LEVEL_TRUN_INTERN','DATA_VARPLOT','PARTIAL_RECONSTR','postpro_impre_step','RELOAD_BMATRIX'};
end

varginOR = varargin ;
AuxDATA=WriteAuxFdNamesNEW(FdnamesInputs,varginOR);
for id = 1:length(AuxDATA);
    eval(AuxDATA{id});
end         
